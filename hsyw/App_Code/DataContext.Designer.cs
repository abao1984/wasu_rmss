//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 2014/6/15 13:26:32
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace HSYWContext
{

    [DatabaseAttribute(Name = "HSYW")]
    [ProviderAttribute(typeof(Devart.Data.Oracle.Linq.Provider.OracleDataProvider))]
    public partial class HSYWDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(HSYWDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertTSYSBRANCH(TSYSBRANCH instance);
        partial void UpdateTSYSBRANCH(TSYSBRANCH instance);
        partial void DeleteTSYSBRANCH(TSYSBRANCH instance);
        partial void InsertTSYSUSER(TSYSUSER instance);
        partial void UpdateTSYSUSER(TSYSUSER instance);
        partial void DeleteTSYSUSER(TSYSUSER instance);
        partial void InsertANNOUNCEMENT(ANNOUNCEMENT instance);
        partial void UpdateANNOUNCEMENT(ANNOUNCEMENT instance);
        partial void DeleteANNOUNCEMENT(ANNOUNCEMENT instance);
        partial void InsertANNOUNCEMENTRECORD(ANNOUNCEMENTRECORD instance);
        partial void UpdateANNOUNCEMENTRECORD(ANNOUNCEMENTRECORD instance);
        partial void DeleteANNOUNCEMENTRECORD(ANNOUNCEMENTRECORD instance);

        #endregion

        public HSYWDataContext() :
        base(GetConnectionString("HSYWDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public HSYWDataContext(MappingSource mappingSource) :
        base(GetConnectionString("HSYWDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public HSYWDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public HSYWDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public HSYWDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public HSYWDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<TSYSBRANCH> TSYSBRANCHES
        {
            get
            {
                return this.GetTable<TSYSBRANCH>();
            }
        }

        public Devart.Data.Linq.Table<TSYSUSER> TSYSUSERs
        {
            get
            {
                return this.GetTable<TSYSUSER>();
            }
        }

        public Devart.Data.Linq.Table<ANNOUNCEMENT> ANNOUNCEMENTs
        {
            get
            {
                return this.GetTable<ANNOUNCEMENT>();
            }
        }

        public Devart.Data.Linq.Table<ANNOUNCEMENTRECORD> ANNOUNCEMENTRECORDs
        {
            get
            {
                return this.GetTable<ANNOUNCEMENTRECORD>();
            }
        }
    }
}

namespace HSYWContext
{

    /// <summary>
    /// There are no comments for HSYWContext.TSYSBRANCH in the schema.
    /// </summary>
    [Table(Name = @"HSYW.T_SYS_BRANCH")]
    public partial class TSYSBRANCH : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _ID;

        private string _BRANCHCODE;

        private string _BRANCHNAME;

        private string _PBRANCHCODE;

        private string _BRANCHLEVEL;

        private string _JGLXDATADM;

        private string _DISPLAYORDER;

        private string _ISUSE;

        private string _ISVISIBLE;

        private string _ISQY;

        private string _PATH;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(string value);
        partial void OnIDChanged();
        partial void OnBRANCHCODEChanging(string value);
        partial void OnBRANCHCODEChanged();
        partial void OnBRANCHNAMEChanging(string value);
        partial void OnBRANCHNAMEChanged();
        partial void OnPBRANCHCODEChanging(string value);
        partial void OnPBRANCHCODEChanged();
        partial void OnBRANCHLEVELChanging(string value);
        partial void OnBRANCHLEVELChanged();
        partial void OnJGLXDATADMChanging(string value);
        partial void OnJGLXDATADMChanged();
        partial void OnDISPLAYORDERChanging(string value);
        partial void OnDISPLAYORDERChanged();
        partial void OnISUSEChanging(string value);
        partial void OnISUSEChanged();
        partial void OnISVISIBLEChanging(string value);
        partial void OnISVISIBLEChanged();
        partial void OnISQYChanging(string value);
        partial void OnISQYChanged();
        partial void OnPATHChanging(string value);
        partial void OnPATHChanged();
        #endregion

        public TSYSBRANCH()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "CHAR(36) NOT NULL", IsPrimaryKey = true)]
        public string ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// 组织机构编码
        /// </summary>
        [Column(Storage = "_BRANCHCODE", CanBeNull = false, DbType = "VARCHAR2(100 CHAR) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string BRANCHCODE
        {
            get
            {
                return this._BRANCHCODE;
            }
            set
            {
                if (this._BRANCHCODE != value)
                {
                    this.OnBRANCHCODEChanging(value);
                    this.SendPropertyChanging();
                    this._BRANCHCODE = value;
                    this.SendPropertyChanged("BRANCHCODE");
                    this.OnBRANCHCODEChanged();
                }
            }
        }

    
        /// <summary>
        /// 组织机构名称
        /// </summary>
        [Column(Storage = "_BRANCHNAME", DbType = "NVARCHAR2(200) NULL", UpdateCheck = UpdateCheck.Never)]
        public string BRANCHNAME
        {
            get
            {
                return this._BRANCHNAME;
            }
            set
            {
                if (this._BRANCHNAME != value)
                {
                    this.OnBRANCHNAMEChanging(value);
                    this.SendPropertyChanging();
                    this._BRANCHNAME = value;
                    this.SendPropertyChanged("BRANCHNAME");
                    this.OnBRANCHNAMEChanged();
                }
            }
        }

    
        /// <summary>
        /// 父组织机构编码
        /// </summary>
        [Column(Storage = "_PBRANCHCODE", DbType = "VARCHAR2(100 CHAR) NULL", UpdateCheck = UpdateCheck.Never)]
        public string PBRANCHCODE
        {
            get
            {
                return this._PBRANCHCODE;
            }
            set
            {
                if (this._PBRANCHCODE != value)
                {
                    this.OnPBRANCHCODEChanging(value);
                    this.SendPropertyChanging();
                    this._PBRANCHCODE = value;
                    this.SendPropertyChanged("PBRANCHCODE");
                    this.OnPBRANCHCODEChanged();
                }
            }
        }

    
        /// <summary>
        /// 组织机构层次
        /// </summary>
        [Column(Storage = "_BRANCHLEVEL", DbType = "CHAR(1) NULL", UpdateCheck = UpdateCheck.Never)]
        public string BRANCHLEVEL
        {
            get
            {
                return this._BRANCHLEVEL;
            }
            set
            {
                if (this._BRANCHLEVEL != value)
                {
                    this.OnBRANCHLEVELChanging(value);
                    this.SendPropertyChanging();
                    this._BRANCHLEVEL = value;
                    this.SendPropertyChanged("BRANCHLEVEL");
                    this.OnBRANCHLEVELChanged();
                }
            }
        }

    
        /// <summary>
        /// 机构类型
        /// </summary>
        [Column(Name = @"JGLX_DATADM", Storage = "_JGLXDATADM", DbType = "VARCHAR2(100 CHAR) NULL", UpdateCheck = UpdateCheck.Never)]
        public string JGLXDATADM
        {
            get
            {
                return this._JGLXDATADM;
            }
            set
            {
                if (this._JGLXDATADM != value)
                {
                    this.OnJGLXDATADMChanging(value);
                    this.SendPropertyChanging();
                    this._JGLXDATADM = value;
                    this.SendPropertyChanged("JGLXDATADM");
                    this.OnJGLXDATADMChanged();
                }
            }
        }

    
        /// <summary>
        /// 排序字段
        /// </summary>
        [Column(Storage = "_DISPLAYORDER", DbType = "VARCHAR2(100 CHAR) NULL", UpdateCheck = UpdateCheck.Never)]
        public string DISPLAYORDER
        {
            get
            {
                return this._DISPLAYORDER;
            }
            set
            {
                if (this._DISPLAYORDER != value)
                {
                    this.OnDISPLAYORDERChanging(value);
                    this.SendPropertyChanging();
                    this._DISPLAYORDER = value;
                    this.SendPropertyChanged("DISPLAYORDER");
                    this.OnDISPLAYORDERChanged();
                }
            }
        }

    
        /// <summary>
        /// 是否启用
        /// </summary>
        [Column(Storage = "_ISUSE", DbType = "CHAR(1) NULL", UpdateCheck = UpdateCheck.Never)]
        public string ISUSE
        {
            get
            {
                return this._ISUSE;
            }
            set
            {
                if (this._ISUSE != value)
                {
                    this.OnISUSEChanging(value);
                    this.SendPropertyChanging();
                    this._ISUSE = value;
                    this.SendPropertyChanged("ISUSE");
                    this.OnISUSEChanged();
                }
            }
        }

    
        /// <summary>
        /// 是否显示
        /// </summary>
        [Column(Storage = "_ISVISIBLE", DbType = "CHAR(1) NULL", UpdateCheck = UpdateCheck.Never)]
        public string ISVISIBLE
        {
            get
            {
                return this._ISVISIBLE;
            }
            set
            {
                if (this._ISVISIBLE != value)
                {
                    this.OnISVISIBLEChanging(value);
                    this.SendPropertyChanging();
                    this._ISVISIBLE = value;
                    this.SendPropertyChanged("ISVISIBLE");
                    this.OnISVISIBLEChanged();
                }
            }
        }

    
        /// <summary>
        /// 是否区域
        /// </summary>
        [Column(Storage = "_ISQY", DbType = "CHAR(1) NULL", UpdateCheck = UpdateCheck.Never)]
        public string ISQY
        {
            get
            {
                return this._ISQY;
            }
            set
            {
                if (this._ISQY != value)
                {
                    this.OnISQYChanging(value);
                    this.SendPropertyChanging();
                    this._ISQY = value;
                    this.SendPropertyChanged("ISQY");
                    this.OnISQYChanged();
                }
            }
        }

    
        /// <summary>
        /// 全路径
        /// </summary>
        [Column(Storage = "_PATH", DbType = "VARCHAR2(500 CHAR) NULL", UpdateCheck = UpdateCheck.Never)]
        public string PATH
        {
            get
            {
                return this._PATH;
            }
            set
            {
                if (this._PATH != value)
                {
                    this.OnPATHChanging(value);
                    this.SendPropertyChanging();
                    this._PATH = value;
                    this.SendPropertyChanged("PATH");
                    this.OnPATHChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// 系统用户表
    /// </summary>
    [Table(Name = @"HSYW.T_SYS_USER")]
    public partial class TSYSUSER : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _ID;

        private string _USERNAME;

        private string _USERID;

        private string _USERREALNAME;

        private string _USERPASS;

        private string _BRANCHCODE;

        private string _USERPHONE;

        private string _USERREGIP;

        private System.Nullable<System.DateTime> _USERREGDATE;

        private string _USERLOGINIP;

        private System.Nullable<System.DateTime> _USERLOGINDATE;

        private string _DISPLAYORDER;

        private string _ISUSE;

        private string _ISVISIBLE;

        private string _ISSUPER;

        private string _FWQY;

        private string _MAILBOX;
        #pragma warning restore 0649

        private EntitySet<ANNOUNCEMENTRECORD> _ANNOUNCEMENTRECORDs;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(string value);
        partial void OnIDChanged();
        partial void OnUSERNAMEChanging(string value);
        partial void OnUSERNAMEChanged();
        partial void OnUSERIDChanging(string value);
        partial void OnUSERIDChanged();
        partial void OnUSERREALNAMEChanging(string value);
        partial void OnUSERREALNAMEChanged();
        partial void OnUSERPASSChanging(string value);
        partial void OnUSERPASSChanged();
        partial void OnBRANCHCODEChanging(string value);
        partial void OnBRANCHCODEChanged();
        partial void OnUSERPHONEChanging(string value);
        partial void OnUSERPHONEChanged();
        partial void OnUSERREGIPChanging(string value);
        partial void OnUSERREGIPChanged();
        partial void OnUSERREGDATEChanging(System.Nullable<System.DateTime> value);
        partial void OnUSERREGDATEChanged();
        partial void OnUSERLOGINIPChanging(string value);
        partial void OnUSERLOGINIPChanged();
        partial void OnUSERLOGINDATEChanging(System.Nullable<System.DateTime> value);
        partial void OnUSERLOGINDATEChanged();
        partial void OnDISPLAYORDERChanging(string value);
        partial void OnDISPLAYORDERChanged();
        partial void OnISUSEChanging(string value);
        partial void OnISUSEChanged();
        partial void OnISVISIBLEChanging(string value);
        partial void OnISVISIBLEChanged();
        partial void OnISSUPERChanging(string value);
        partial void OnISSUPERChanged();
        partial void OnFWQYChanging(string value);
        partial void OnFWQYChanged();
        partial void OnMAILBOXChanging(string value);
        partial void OnMAILBOXChanged();
        #endregion

        public TSYSUSER()
        {
            this._ANNOUNCEMENTRECORDs = new EntitySet<ANNOUNCEMENTRECORD>(new Action<ANNOUNCEMENTRECORD>(this.attach_ANNOUNCEMENTRECORDs), new Action<ANNOUNCEMENTRECORD>(this.detach_ANNOUNCEMENTRECORDs));
            OnCreated();
        }

    
        /// <summary>
        /// 用户ID
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "CHAR(36) NOT NULL", IsPrimaryKey = true)]
        public string ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// 用户名
        /// </summary>
        [Column(Storage = "_USERNAME", CanBeNull = false, DbType = "VARCHAR2(100 CHAR) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string USERNAME
        {
            get
            {
                return this._USERNAME;
            }
            set
            {
                if (this._USERNAME != value)
                {
                    this.OnUSERNAMEChanging(value);
                    this.SendPropertyChanging();
                    this._USERNAME = value;
                    this.SendPropertyChanged("USERNAME");
                    this.OnUSERNAMEChanged();
                }
            }
        }

    
        /// <summary>
        /// 身份证号码
        /// </summary>
        [Column(Storage = "_USERID", DbType = "NVARCHAR2(200) NULL", UpdateCheck = UpdateCheck.Never)]
        public string USERID
        {
            get
            {
                return this._USERID;
            }
            set
            {
                if (this._USERID != value)
                {
                    this.OnUSERIDChanging(value);
                    this.SendPropertyChanging();
                    this._USERID = value;
                    this.SendPropertyChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }

    
        /// <summary>
        /// 用户真实姓名
        /// </summary>
        [Column(Storage = "_USERREALNAME", DbType = "NVARCHAR2(200) NULL", UpdateCheck = UpdateCheck.Never)]
        public string USERREALNAME
        {
            get
            {
                return this._USERREALNAME;
            }
            set
            {
                if (this._USERREALNAME != value)
                {
                    this.OnUSERREALNAMEChanging(value);
                    this.SendPropertyChanging();
                    this._USERREALNAME = value;
                    this.SendPropertyChanged("USERREALNAME");
                    this.OnUSERREALNAMEChanged();
                }
            }
        }

    
        /// <summary>
        /// 用户密码
        /// </summary>
        [Column(Storage = "_USERPASS", DbType = "VARCHAR2(100 CHAR) NULL", UpdateCheck = UpdateCheck.Never)]
        public string USERPASS
        {
            get
            {
                return this._USERPASS;
            }
            set
            {
                if (this._USERPASS != value)
                {
                    this.OnUSERPASSChanging(value);
                    this.SendPropertyChanging();
                    this._USERPASS = value;
                    this.SendPropertyChanged("USERPASS");
                    this.OnUSERPASSChanged();
                }
            }
        }

    
        /// <summary>
        /// 组织编码
        /// </summary>
        [Column(Storage = "_BRANCHCODE", DbType = "VARCHAR2(100 CHAR) NULL", UpdateCheck = UpdateCheck.Never)]
        public string BRANCHCODE
        {
            get
            {
                return this._BRANCHCODE;
            }
            set
            {
                if (this._BRANCHCODE != value)
                {
                    this.OnBRANCHCODEChanging(value);
                    this.SendPropertyChanging();
                    this._BRANCHCODE = value;
                    this.SendPropertyChanged("BRANCHCODE");
                    this.OnBRANCHCODEChanged();
                }
            }
        }

    
        /// <summary>
        /// 联系电话
        /// </summary>
        [Column(Storage = "_USERPHONE", DbType = "VARCHAR2(100 CHAR) NULL", UpdateCheck = UpdateCheck.Never)]
        public string USERPHONE
        {
            get
            {
                return this._USERPHONE;
            }
            set
            {
                if (this._USERPHONE != value)
                {
                    this.OnUSERPHONEChanging(value);
                    this.SendPropertyChanging();
                    this._USERPHONE = value;
                    this.SendPropertyChanged("USERPHONE");
                    this.OnUSERPHONEChanged();
                }
            }
        }

    
        /// <summary>
        /// 用户创建IP
        /// </summary>
        [Column(Storage = "_USERREGIP", DbType = "VARCHAR2(100 CHAR) NULL", UpdateCheck = UpdateCheck.Never)]
        public string USERREGIP
        {
            get
            {
                return this._USERREGIP;
            }
            set
            {
                if (this._USERREGIP != value)
                {
                    this.OnUSERREGIPChanging(value);
                    this.SendPropertyChanging();
                    this._USERREGIP = value;
                    this.SendPropertyChanged("USERREGIP");
                    this.OnUSERREGIPChanged();
                }
            }
        }

    
        /// <summary>
        /// 用户创建时间
        /// </summary>
        [Column(Storage = "_USERREGDATE", DbType = "DATE NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> USERREGDATE
        {
            get
            {
                return this._USERREGDATE;
            }
            set
            {
                if (this._USERREGDATE != value)
                {
                    this.OnUSERREGDATEChanging(value);
                    this.SendPropertyChanging();
                    this._USERREGDATE = value;
                    this.SendPropertyChanged("USERREGDATE");
                    this.OnUSERREGDATEChanged();
                }
            }
        }

    
        /// <summary>
        /// 用户最近登录IP
        /// </summary>
        [Column(Storage = "_USERLOGINIP", DbType = "VARCHAR2(100 CHAR) NULL", UpdateCheck = UpdateCheck.Never)]
        public string USERLOGINIP
        {
            get
            {
                return this._USERLOGINIP;
            }
            set
            {
                if (this._USERLOGINIP != value)
                {
                    this.OnUSERLOGINIPChanging(value);
                    this.SendPropertyChanging();
                    this._USERLOGINIP = value;
                    this.SendPropertyChanged("USERLOGINIP");
                    this.OnUSERLOGINIPChanged();
                }
            }
        }

    
        /// <summary>
        /// 用户最近登录时间
        /// </summary>
        [Column(Storage = "_USERLOGINDATE", DbType = "DATE NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> USERLOGINDATE
        {
            get
            {
                return this._USERLOGINDATE;
            }
            set
            {
                if (this._USERLOGINDATE != value)
                {
                    this.OnUSERLOGINDATEChanging(value);
                    this.SendPropertyChanging();
                    this._USERLOGINDATE = value;
                    this.SendPropertyChanged("USERLOGINDATE");
                    this.OnUSERLOGINDATEChanged();
                }
            }
        }

    
        /// <summary>
        /// 用户顺序号
        /// </summary>
        [Column(Storage = "_DISPLAYORDER", DbType = "VARCHAR2(100 CHAR) NULL", UpdateCheck = UpdateCheck.Never)]
        public string DISPLAYORDER
        {
            get
            {
                return this._DISPLAYORDER;
            }
            set
            {
                if (this._DISPLAYORDER != value)
                {
                    this.OnDISPLAYORDERChanging(value);
                    this.SendPropertyChanging();
                    this._DISPLAYORDER = value;
                    this.SendPropertyChanged("DISPLAYORDER");
                    this.OnDISPLAYORDERChanged();
                }
            }
        }

    
        /// <summary>
        /// 是否启用
        /// </summary>
        [Column(Storage = "_ISUSE", DbType = "CHAR(1) NULL", UpdateCheck = UpdateCheck.Never)]
        public string ISUSE
        {
            get
            {
                return this._ISUSE;
            }
            set
            {
                if (this._ISUSE != value)
                {
                    this.OnISUSEChanging(value);
                    this.SendPropertyChanging();
                    this._ISUSE = value;
                    this.SendPropertyChanged("ISUSE");
                    this.OnISUSEChanged();
                }
            }
        }

    
        /// <summary>
        /// 是否隐藏
        /// </summary>
        [Column(Storage = "_ISVISIBLE", DbType = "CHAR(1) NULL", UpdateCheck = UpdateCheck.Never)]
        public string ISVISIBLE
        {
            get
            {
                return this._ISVISIBLE;
            }
            set
            {
                if (this._ISVISIBLE != value)
                {
                    this.OnISVISIBLEChanging(value);
                    this.SendPropertyChanging();
                    this._ISVISIBLE = value;
                    this.SendPropertyChanged("ISVISIBLE");
                    this.OnISVISIBLEChanged();
                }
            }
        }

    
        /// <summary>
        /// 是否超级用户
        /// </summary>
        [Column(Storage = "_ISSUPER", DbType = "CHAR(1) NULL", UpdateCheck = UpdateCheck.Never)]
        public string ISSUPER
        {
            get
            {
                return this._ISSUPER;
            }
            set
            {
                if (this._ISSUPER != value)
                {
                    this.OnISSUPERChanging(value);
                    this.SendPropertyChanging();
                    this._ISSUPER = value;
                    this.SendPropertyChanged("ISSUPER");
                    this.OnISSUPERChanged();
                }
            }
        }

    
        /// <summary>
        /// 访问区于
        /// </summary>
        [Column(Storage = "_FWQY", DbType = "VARCHAR2(1000 CHAR) NULL", UpdateCheck = UpdateCheck.Never)]
        public string FWQY
        {
            get
            {
                return this._FWQY;
            }
            set
            {
                if (this._FWQY != value)
                {
                    this.OnFWQYChanging(value);
                    this.SendPropertyChanging();
                    this._FWQY = value;
                    this.SendPropertyChanged("FWQY");
                    this.OnFWQYChanged();
                }
            }
        }

    
        /// <summary>
        /// 邮箱
        /// </summary>
        [Column(Storage = "_MAILBOX", DbType = "VARCHAR2(200 CHAR) NULL", UpdateCheck = UpdateCheck.Never)]
        public string MAILBOX
        {
            get
            {
                return this._MAILBOX;
            }
            set
            {
                if (this._MAILBOX != value)
                {
                    this.OnMAILBOXChanging(value);
                    this.SendPropertyChanging();
                    this._MAILBOX = value;
                    this.SendPropertyChanged("MAILBOX");
                    this.OnMAILBOXChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ANNOUNCEMENTRECORDs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="TSYSUSER_ANNOUNCEMENTRECORD", Storage="_ANNOUNCEMENTRECORDs", ThisKey="ID", OtherKey="USERID", DeleteRule="NO ACTION")]
        public EntitySet<ANNOUNCEMENTRECORD> ANNOUNCEMENTRECORDs
        {
            get
            {
                return this._ANNOUNCEMENTRECORDs;
            }
            set
            {
                this._ANNOUNCEMENTRECORDs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_ANNOUNCEMENTRECORDs(ANNOUNCEMENTRECORD entity)
        {
            this.SendPropertyChanging("ANNOUNCEMENTRECORDs");
            entity.TSYSUSER = this;
        }
    
        private void detach_ANNOUNCEMENTRECORDs(ANNOUNCEMENTRECORD entity)
        {
            this.SendPropertyChanging("ANNOUNCEMENTRECORDs");
            entity.TSYSUSER = null;
        }
    }

    /// <summary>
    /// There are no comments for HSYWContext.ANNOUNCEMENT in the schema.
    /// </summary>
    [Table(Name = @"HSYW.ANNOUNCEMENTS")]
    public partial class ANNOUNCEMENT : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _ID;

        private System.Nullable<System.DateTime> _POSTTIME;

        private string _POSTOWNER;

        private string _POSTTITLE;

        private string _POSTCONTENT;

        private string _POSTCOMMENT = @"";
        #pragma warning restore 0649

        private EntitySet<ANNOUNCEMENTRECORD> _ANNOUNCEMENTRECORDs;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(long value);
        partial void OnIDChanged();
        partial void OnPOSTTIMEChanging(System.Nullable<System.DateTime> value);
        partial void OnPOSTTIMEChanged();
        partial void OnPOSTOWNERChanging(string value);
        partial void OnPOSTOWNERChanged();
        partial void OnPOSTTITLEChanging(string value);
        partial void OnPOSTTITLEChanged();
        partial void OnPOSTCONTENTChanging(string value);
        partial void OnPOSTCONTENTChanged();
        partial void OnPOSTCOMMENTChanging(string value);
        partial void OnPOSTCOMMENTChanged();
        #endregion

        public ANNOUNCEMENT()
        {
            this._ANNOUNCEMENTRECORDs = new EntitySet<ANNOUNCEMENTRECORD>(new Action<ANNOUNCEMENTRECORD>(this.attach_ANNOUNCEMENTRECORDs), new Action<ANNOUNCEMENTRECORD>(this.detach_ANNOUNCEMENTRECORDs));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        public long ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for POSTTIME in the schema.
        /// </summary>
        [Column(Name = @"POST_TIME", Storage = "_POSTTIME", DbType = "DATE NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> POSTTIME
        {
            get
            {
                return this._POSTTIME;
            }
            set
            {
                if (this._POSTTIME != value)
                {
                    this.OnPOSTTIMEChanging(value);
                    this.SendPropertyChanging();
                    this._POSTTIME = value;
                    this.SendPropertyChanged("POSTTIME");
                    this.OnPOSTTIMEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for POSTOWNER in the schema.
        /// </summary>
        [Column(Name = @"POST_OWNER", Storage = "_POSTOWNER", CanBeNull = false, DbType = "CLOB NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string POSTOWNER
        {
            get
            {
                return this._POSTOWNER;
            }
            set
            {
                if (this._POSTOWNER != value)
                {
                    this.OnPOSTOWNERChanging(value);
                    this.SendPropertyChanging();
                    this._POSTOWNER = value;
                    this.SendPropertyChanged("POSTOWNER");
                    this.OnPOSTOWNERChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for POSTTITLE in the schema.
        /// </summary>
        [Column(Name = @"POST_TITLE", Storage = "_POSTTITLE", CanBeNull = false, DbType = "VARCHAR2(200 CHAR) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string POSTTITLE
        {
            get
            {
                return this._POSTTITLE;
            }
            set
            {
                if (this._POSTTITLE != value)
                {
                    this.OnPOSTTITLEChanging(value);
                    this.SendPropertyChanging();
                    this._POSTTITLE = value;
                    this.SendPropertyChanged("POSTTITLE");
                    this.OnPOSTTITLEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for POSTCONTENT in the schema.
        /// </summary>
        [Column(Name = @"POST_CONTENT", Storage = "_POSTCONTENT", CanBeNull = false, DbType = "CLOB NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string POSTCONTENT
        {
            get
            {
                return this._POSTCONTENT;
            }
            set
            {
                if (this._POSTCONTENT != value)
                {
                    this.OnPOSTCONTENTChanging(value);
                    this.SendPropertyChanging();
                    this._POSTCONTENT = value;
                    this.SendPropertyChanged("POSTCONTENT");
                    this.OnPOSTCONTENTChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for POSTCOMMENT in the schema.
        /// </summary>
        [Column(Name = @"POST_COMMENT", Storage = "_POSTCOMMENT", DbType = "VARCHAR2(200 CHAR) NULL", UpdateCheck = UpdateCheck.Never)]
        public string POSTCOMMENT
        {
            get
            {
                return this._POSTCOMMENT;
            }
            set
            {
                if (this._POSTCOMMENT != value)
                {
                    this.OnPOSTCOMMENTChanging(value);
                    this.SendPropertyChanging();
                    this._POSTCOMMENT = value;
                    this.SendPropertyChanged("POSTCOMMENT");
                    this.OnPOSTCOMMENTChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ANNOUNCEMENTRECORDs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ANNOUNCEMENT_ANNOUNCEMENTRECORD", Storage="_ANNOUNCEMENTRECORDs", ThisKey="ID", OtherKey="ANNOUNCEMENTID", DeleteRule="NO ACTION")]
        public EntitySet<ANNOUNCEMENTRECORD> ANNOUNCEMENTRECORDs
        {
            get
            {
                return this._ANNOUNCEMENTRECORDs;
            }
            set
            {
                this._ANNOUNCEMENTRECORDs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_ANNOUNCEMENTRECORDs(ANNOUNCEMENTRECORD entity)
        {
            this.SendPropertyChanging("ANNOUNCEMENTRECORDs");
            entity.ANNOUNCEMENT = this;
        }
    
        private void detach_ANNOUNCEMENTRECORDs(ANNOUNCEMENTRECORD entity)
        {
            this.SendPropertyChanging("ANNOUNCEMENTRECORDs");
            entity.ANNOUNCEMENT = null;
        }
    }

    /// <summary>
    /// There are no comments for HSYWContext.ANNOUNCEMENTRECORD in the schema.
    /// </summary>
    [Table(Name = @"HSYW.ANNOUNCEMENT_RECORD")]
    public partial class ANNOUNCEMENTRECORD : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _ID;

        private string _USERID;

        private long _ANNOUNCEMENTID;

        private bool _READFLAG;
        #pragma warning restore 0649

        private EntityRef<TSYSUSER> _TSYSUSER;

        private EntityRef<ANNOUNCEMENT> _ANNOUNCEMENT;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(long value);
        partial void OnIDChanged();
        partial void OnUSERIDChanging(string value);
        partial void OnUSERIDChanged();
        partial void OnANNOUNCEMENTIDChanging(long value);
        partial void OnANNOUNCEMENTIDChanged();
        partial void OnREADFLAGChanging(bool value);
        partial void OnREADFLAGChanged();
        #endregion

        public ANNOUNCEMENTRECORD()
        {
            this._TSYSUSER  = default(EntityRef<TSYSUSER>);
            this._ANNOUNCEMENT  = default(EntityRef<ANNOUNCEMENT>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        public long ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for USERID in the schema.
        /// </summary>
        [Column(Name = @"USER_ID", Storage = "_USERID", CanBeNull = false, DbType = "CHAR(36) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string USERID
        {
            get
            {
                return this._USERID;
            }
            set
            {
                if (this._USERID != value)
                {
                    if (this._TSYSUSER.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUSERIDChanging(value);
                    this.SendPropertyChanging();
                    this._USERID = value;
                    this.SendPropertyChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ANNOUNCEMENTID in the schema.
        /// </summary>
        [Column(Name = @"ANNOUNCEMENT_ID", Storage = "_ANNOUNCEMENTID", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long ANNOUNCEMENTID
        {
            get
            {
                return this._ANNOUNCEMENTID;
            }
            set
            {
                if (this._ANNOUNCEMENTID != value)
                {
                    if (this._ANNOUNCEMENT.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnANNOUNCEMENTIDChanging(value);
                    this.SendPropertyChanging();
                    this._ANNOUNCEMENTID = value;
                    this.SendPropertyChanged("ANNOUNCEMENTID");
                    this.OnANNOUNCEMENTIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for READFLAG in the schema.
        /// </summary>
        [Column(Name = @"READ_FLAG", Storage = "_READFLAG", CanBeNull = false, DbType = "NUMBER(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool READFLAG
        {
            get
            {
                return this._READFLAG;
            }
            set
            {
                if (this._READFLAG != value)
                {
                    this.OnREADFLAGChanging(value);
                    this.SendPropertyChanging();
                    this._READFLAG = value;
                    this.SendPropertyChanged("READFLAG");
                    this.OnREADFLAGChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TSYSUSER in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="TSYSUSER_ANNOUNCEMENTRECORD", Storage="_TSYSUSER", ThisKey="USERID", OtherKey="ID", IsForeignKey=true)]
        public TSYSUSER TSYSUSER
        {
            get
            {
                return this._TSYSUSER.Entity;
            }
            set
            {
                TSYSUSER previousValue = this._TSYSUSER.Entity;
                if ((previousValue != value) || (this._TSYSUSER.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._TSYSUSER.Entity = null;
                        previousValue.ANNOUNCEMENTRECORDs.Remove(this);
                    }
                    this._TSYSUSER.Entity = value;
                    if (value != null)
                    {
                        this._USERID = value.ID;
                        value.ANNOUNCEMENTRECORDs.Add(this);
                    }
                    else
                    {
                        this._USERID = default(string);
                    }
                    this.SendPropertyChanged("TSYSUSER");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ANNOUNCEMENT in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ANNOUNCEMENT_ANNOUNCEMENTRECORD", Storage="_ANNOUNCEMENT", ThisKey="ANNOUNCEMENTID", OtherKey="ID", IsForeignKey=true)]
        public ANNOUNCEMENT ANNOUNCEMENT
        {
            get
            {
                return this._ANNOUNCEMENT.Entity;
            }
            set
            {
                ANNOUNCEMENT previousValue = this._ANNOUNCEMENT.Entity;
                if ((previousValue != value) || (this._ANNOUNCEMENT.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._ANNOUNCEMENT.Entity = null;
                        previousValue.ANNOUNCEMENTRECORDs.Remove(this);
                    }
                    this._ANNOUNCEMENT.Entity = value;
                    if (value != null)
                    {
                        this._ANNOUNCEMENTID = value.ID;
                        value.ANNOUNCEMENTRECORDs.Add(this);
                    }
                    else
                    {
                        this._ANNOUNCEMENTID = default(long);
                    }
                    this.SendPropertyChanged("ANNOUNCEMENT");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
